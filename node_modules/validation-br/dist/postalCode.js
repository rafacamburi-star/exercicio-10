"use strict";
/**
 * isPostalCode()
 * Calcula se um código de rastreamento postal no formato JT194690698BR é válido.
 *
 * @doc
 * - O número de registro postal deve possuir 13 caracters no formato JT194690698BR.
 *
 * - Os caracteres 1 e 2 informam o tipo do objeto. Ex.: SX é Sedex, RC é carta registrada etc.
 *
 * - Os caracteres de 3 a 10 são a numeração sequencial do tipo do objeto.
 *
 * - O caractere 11 é o dígito verificador.
 *
 * - Os caracteres 12 e 13 representa o código do País de onde a postagem partiu.
 *
 * 1) Partes do número
 *  ______ ___________________________ ______ _______
 * | Tipo | Número                    |  DV  |  País |
 * | J T    1  9  4  6  9  0  6  9       8      B R  |
 * |______|___________________________|______|_______|
 *
 * 2) Cálculo do DV.
 *
 *  - Soma-se o produto das algarismos 3 a 10 pelos números 8, 6, 4, 2, 3, 5, 9, 7
 *
 *    1   9   4   6   9   0   6   9
 *    x   x   x   x   x   x   x   x
 *    8   6   4   2   3   5   9   7
 * =  8 +54 +16 +12 +18  +0 +54 +63 = 234
 *
 *  - O somatório encontrado é dividido por 11 e o resultado é subtraído de 11
 *    234 / 11 tem resto 3. 11 - 3 = 8. DV1 é 8.
 *    Obs.: Caso o cálculo de DV1 retorne 0, o resultado será 5.
 *          Caso retorne 1, o resto será 0
 *
 *
 *
 *
 * Fonte:
 *
 * @param {String} value Objeto postal no formato JT194690698BR
 * @returns {Boolean}
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validate = exports.validateOrFail = exports.fake = exports.mask = exports.dv = void 0;
const ValidationBRError_1 = __importDefault(require("./data/ValidationBRError"));
const utils_1 = require("./utils");
/**
 * dv()
 * Calcula o dígito verificador
 *
 * @param {Number|String} value
 * @returns {String}
 */
const dv = (value) => {
    if (!value)
        throw ValidationBRError_1.default.EMPTY_VALUE;
    const postalCode = String(value)
        .replace(/[^0-9]+/gi, '')
        .padStart(8, '0')
        .substring(0, 8);
    const sum = (0, utils_1.sumElementsByMultipliers)(postalCode, [8, 6, 4, 2, 3, 5, 9, 7]);
    const rest = sum % 11;
    // const specificities = { 0: { dv: 5 }, 1: { dv: 0 } }
    const specificities = [
        { rest: 0, dv: 5 },
        { rest: 1, dv: 0 },
    ];
    const specifity = specificities.find((item) => item.rest === rest);
    const DV = specifity ? specifity.dv : 11 - rest;
    return String(DV);
};
exports.dv = dv;
/**
 * Aplica uma máscara ao número informado
 *
 * @param {String} value Número de Processo
 * @returns {String} Valor com a máscara
 */
const mask = (value) => String(value).toLocaleUpperCase();
exports.mask = mask;
/**
 * fake()
 * Gera um número válido
 *
 * @returns {String}
 */
const fake = (withMask = false) => {
    const num = (0, utils_1.fakeNumber)(8, true);
    const postalCode = `${(0, utils_1.randomLetter)()}${(0, utils_1.randomLetter)()}${num}${(0, exports.dv)(num)}BR`;
    if (withMask)
        return (0, exports.mask)(postalCode);
    return postalCode;
};
exports.fake = fake;
/**
 * validateOrFail()
 * Valida se um número é válido e
 * retorna uma exceção se não estiver
 *
 * @param {String} value Número a ser validado
 * @returns {Boolean}
 */
const validateOrFail = (value) => {
    if (!/^[a-z]{2}([\d]{9})[a-z]{2}$/gi.test(String(value))) {
        throw new Error('O número não está no formato "XX000000000XX"');
    }
    const postalCode = (0, utils_1.clearValue)(value.substring(2, 11), 9);
    if ((0, exports.dv)(value.substring(2, 11)) !== postalCode.substring(8, 9)) {
        throw ValidationBRError_1.default.INVALID_DV;
    }
    return true;
};
exports.validateOrFail = validateOrFail;
/**
 * validate()
 * Valida se um número é válido
 *
 * @param {String} value Número a ser validado
 * @returns {Boolean}
 */
const validate = (value) => {
    try {
        return (0, exports.validateOrFail)(value);
    }
    catch (error) {
        return false;
    }
};
exports.validate = validate;
exports.default = exports.validate;
//# sourceMappingURL=postalCode.js.map