"use strict";
/**
 * RENAVAM
 * Funções auxiliares para cálculo de máscaras, validação, dígito verificador e criaçãode
 * números fake.
 *
 * @doc
 * - O número de RENAVAM deve possuir 11 caracteres
 *
 * - Os caracteres de 1 a 10 são a numeração documento
 *
 * - O caractere 11 é o dígito verificador.
 *
 * 1) Partes do número
 *  _______________________________________________
 * |  Número                                 | D V |
 * |  2   6   8   2   7   6   4   9   9   6  -  0  |
 * |_________________________________________|_____|
 *
 * 2) Cálculo do DV.
 *
 *  - Soma-se o produto das algarismos 3 a 10 pelos números 3, 2, 9, 8, 7, 6, 5, 4, 3, 2
 *
 *    2   6   8   2   7   6   4   9   9   6
 *    x   x   x   x   x   x   x   x   x   x
 *    3   2   9   8   7   6   5   4   3   2
 * =  6 +12 +72 +16 +49 +12 +20 +36 +27 +12  =  234
 *
 *  - O somatório encontrado é multiplicado por 10 e ao resultado
 *    é aplicado o cálculo do MOD 11.
 *
 *    ( 234 * 10 ) / 11 tem resto 8. DV = 8. Caso o resto seja maior ou igual a
 *    10, DV será 0.
 *
 *
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validate = exports.validateOrFail = exports.fake = exports.mask = exports.dv = void 0;
const ValidationBRError_1 = __importDefault(require("./data/ValidationBRError"));
const utils_1 = require("./utils");
/**
 * dv()
 * Calcula o dígito verificador
 *
 * @param {Number|String} value
 * @returns {String}
 */
const dv = (value) => {
    const renavam = (0, utils_1.clearValue)(value, 10, {
        fillZerosAtLeft: true,
        trimAtRight: true,
        rejectEmpty: true,
    });
    const sum1 = (0, utils_1.sumElementsByMultipliers)(renavam, [3, 2, 9, 8, 7, 6, 5, 4, 3, 2]) * 10;
    const dv1 = sum1 % 11 >= 10 ? 0 : sum1 % 11;
    return `${dv1}`;
};
exports.dv = dv;
/**
 * Aplica uma máscara ao número informado
 *
 * @param {String} value Número de Processo
 * @returns {String} Valor com a máscara
 */
const mask = (value) => (0, utils_1.applyMask)(value, '0000000000-0');
exports.mask = mask;
/**
 * fake()
 * Gera um número válido
 *
 * @returns {String}
 */
const fake = (withMask = false) => {
    const value = (0, utils_1.fakeNumber)(10, true);
    const renavam = `${value}${(0, exports.dv)(value)}`;
    if (withMask)
        return (0, exports.mask)(renavam);
    return renavam;
};
exports.fake = fake;
/**
 * validateOrFail()
 * Valida se um número é válido e
 * retorna uma exceção se não estiver
 *
 * @param {String|Number} value Número a ser validado
 * @returns {Boolean}
 */
const validateOrFail = (value) => {
    const renavam = (0, utils_1.clearValue)(value, 11, {
        fillZerosAtLeft: true,
        rejectEmpty: true,
        rejectHigherLength: true,
        rejectEqualSequence: true,
    });
    if ((0, exports.dv)(renavam) !== renavam.substring(10, 11)) {
        throw ValidationBRError_1.default.INVALID_DV;
    }
    return true;
};
exports.validateOrFail = validateOrFail;
/**
 * validate()
 * Valida se um número é válido
 *
 * @param {String|Number} value Número a ser validado
 * @returns {Boolean}
 */
const validate = (value) => {
    try {
        return (0, exports.validateOrFail)(value);
    }
    catch (error) {
        return false;
    }
};
exports.validate = validate;
exports.default = exports.validate;
//# sourceMappingURL=renavam.js.map